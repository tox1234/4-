"""
 HTTP Server Shell
 Author: Ido Shema
 Purpose: EX.4 +
"""
import socket
import os
import mimetypes

DEFAULT_URL = "/index.html"
ROOT_WEB = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB"
REDIRECTION_DICTIONARY = {'/moved': '/'}
QUEUE_SIZE = 10
ERROR404 = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB/imgs/404_not_found.jpg"
ERROR500 = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB/imgs/500_internal_error.png"
ERROR400 = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB/imgs/400_bad_request.png"
ERROR403 = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB/imgs/403_forbidden.png"
IP = '0.0.0.0'
UPLOAD_DIR = "C:/Users/User/PycharmProjects/targil4/ROOT-WEB/uploads"
PORT = 8080
SOCKET_TIMEOUT = 2


def get_file_data(file_name):
    """
        Get data from file
        :param file_name: the name of the file
        :return: the file data in a string
    """
    try:
        with open(file_name, 'rb') as file:
            return file.read()
    except FileNotFoundError:
        return b''


def validate_http_request(request):
    """
        Check if request is a valid HTTP request and returns TRUE / FALSE and
        the requested URL
        :param request: the request which was received from the client
        :return: a tuple of (True/False - depending if the request is valid,
        the requested resource )
    """
    request_lines = request.split(b'\r\n')
    if len(request_lines) > 0 and (request_lines[0].startswith(b'GET') or request_lines[0].startswith(b'POST')):
        parts = request_lines[0].split(b' ')
        if len(parts) == 3 and parts[2].endswith(b'HTTP/1.1'):
            return True, parts[1].decode('utf-8')
    return False, ''


def bad_request(client_socket):
    """
        return the handle for 400 bad_request
        :param client_socket: a socket for the communication with the client
        :return: None
        """
    data = get_file_data(ERROR400)
    http_response = ('HTTP/1.1 400 BAD REQUEST\r\nContent-Type: image/jpeg\r\n' +
                     f'Content-Length: {len(data)}\r\n\r\n').encode() + data
    client_socket.send(http_response)
    return


def calculate_next_number(request):
    """
    Calculate the next number based on the provided parameter.
    :param request: the HTTP request
    :return: the next number as a string or None if the parameter is missing or invalid
    """
    try:
        num_param = request.split('num=')[1]
        return str(int(num_param) + 1)
    except (ValueError, IndexError):
        return None


def handle_next_calculate_request(request, client_socket):
    """
    Handle the "next-calculate" interface.
    :param request: the HTTP request
    :param client_socket: a socket for communication with the client
    :return: None
    """
    next_num = calculate_next_number(request)
    if next_num is not None:
        http_response = ('HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n' +
                         f'Content-Length: {len(next_num)}\r\n\r\n').encode() + next_num.encode()
        client_socket.send(http_response)
    else:
        bad_request(client_socket)


def calculate_area(request):
    """
    Calculate the area of the triangular based on the provided parameters.
    :param request: the HTTP request
    :return: the area of the triangular as a string or None if the parameters are missing or invalid
    """
    try:
        num_params = request.split('?')[1]
        temp = num_params.split("&")
        num1 = temp[0].split("=")[1]
        num2 = temp[1].split("=")[1]
        square = (float(num1) * float(num2)) / 2
        return str(square)
    except (ValueError, IndexError):
        return None


def handle_upload_request(filename, data, client_socket):
    """
    Calculate the area of the triangular based on the provided parameters.
    :param client_socket: a socket for communication with the client
    :param data: the data of the file(in bytes)
    :param filename: the filename.
    :return: None
    """
    file_path = os.path.join(UPLOAD_DIR + "/" + filename)
    with open(file_path, 'wb') as file:
        file.write(data)

    http_response = ('HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n' +
                     f'Content-Length: {len("Data received successfully")}\r\n\r\n').encode() + "Data received " \
                                                                                                "successfully".encode()
    client_socket.send(http_response)
    return


def handle_calculate_area_request(request, client_socket):
    """
    Handle the "calculate_area" interface.
    :param request: the HTTP request
    :param client_socket: a socket for communication with the client
    :return: None
    """
    square = calculate_area(request)
    if square is not None:
        http_response = ('HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n' +
                         f'Content-Length: {len(square)}\r\n\r\n').encode() + square.encode()
        client_socket.send(http_response)
    else:
        bad_request(client_socket)


def handle_client_request(resource, client_socket):
    """
        Check the required resource, generate proper HTTP response and send
        to client
        :param resource: the required resource
        :param client_socket: a socket for the communication with the client
        :return: None
    """
    if resource == '/':
        resource = DEFAULT_URL

    if resource.startswith('/forbidden'):
        data = get_file_data(ERROR403)
        http_response = ('HTTP/1.1 403 FORBIDDEN\r\nContent-Type: image/jpeg\r\n' +
                         f'Content-Length: {len(data)}\r\n\r\n').encode() + data
        client_socket.send(http_response)
        return

    if resource.startswith('/moved'):
        http_response = 'HTTP/1.1 302 TEMPORARY REDIRECT\r\nLocation: /\r\n\r\n'.encode()
        client_socket.send(http_response)
        return

    if resource.startswith('/error'):
        data = get_file_data(ERROR500)
        http_response = ('HTTP/1.1 500 ERROR SERVER INTERNAL\r\nContent-Type: image/jpeg\r\n' +
                         f'Content-Length: {len(data)}\r\n\r\n').encode() + data
        client_socket.send(http_response)
        return

    if resource.startswith('/calculate-next'):
        handle_next_calculate_request(resource, client_socket)
        return

    if resource.startswith('/calculate-area'):
        handle_calculate_area_request(resource, client_socket)
        return

    if resource.startswith('/image'):
        image = resource.split("=")[1]
        if os.path.isfile(os.path.join(UPLOAD_DIR, image)):
            data = get_file_data(os.path.join(UPLOAD_DIR, image))
            http_response = ('HTTP/1.1 200 OK\r\nContent-Type: image/jpeg\r\n' +
                             f'Content-Length: {len(data)}\r\n\r\n').encode() + data
            client_socket.send(http_response)
        else:
            http_response = 'HTTP/1.1 404 NOT FOUND\r\n\r\n'.encode()
            client_socket.send(http_response)
        return

    file_path = os.path.join(ROOT_WEB, resource[1:])
    file_type, encoding = mimetypes.guess_type(file_path)
    if file_type:
        http_header = f'HTTP/1.1 200 OK\r\nContent-Type: {file_type}; charset=utf-8\r\n'
        data = get_file_data(file_path)
        http_response = (http_header + f'Content-Length: {len(data)}\r\n\r\n').encode() + data
        client_socket.send(http_response)
        return
    else:
        data = get_file_data(ERROR404)
        http_response = ('HTTP/1.1 404 NOT FOUND\r\nContent-Type: image/jpeg\r\n' +
                         f'Content-Length: {len(data)}\r\n\r\n').encode() + data
        client_socket.send(http_response)
        return


def handle_client(client_socket):
    """
        Handles client requests: verifies client's requests are legal HTTP, calls
        function to handle the requests
        :param client_socket: the socket for the communication with the client
        :return: None
    """
    data = b""
    print('Client connected')
    while True:
        client_request = b''
        while b'\r\n\r\n' not in client_request:
            client_request += client_socket.recv(1)
            if client_request == b'':
                break
        valid_http, resource = validate_http_request(client_request)

        if client_request.startswith(b"POST") and valid_http:
            temp = client_request.decode()
            name = (temp.split("file-name=")[1]).split(" ")[0]
            length = int(((temp.split("Content-Length: "))[1]).split("\r")[0])
            while length != 0:
                data += client_socket.recv(1)
                length -= 1
            handle_upload_request(name, data, client_socket)
        else:
            if valid_http:
                print('Got a valid HTTP request')
                handle_client_request(resource, client_socket)
            else:
                print('Error: Not a valid HTTP request')
                bad_request(client_socket)
                break

    print('Closing connection')
    client_socket.close()


def main():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.bind((IP, PORT))
        server_socket.listen(QUEUE_SIZE)
        print("Listening for connections on port %d" % PORT)

        while True:
            client_socket, client_address = server_socket.accept()
            try:
                print('New connection received')
                client_socket.settimeout(SOCKET_TIMEOUT)
                handle_client(client_socket)
            except socket.error as err:
                print('Received socket exception - ' + str(err))
            finally:
                client_socket.close()
    except socket.error as err:
        print('Received socket exception - ' + str(err))
    finally:
        server_socket.close()


if __name__ == "__main__":
    main()
